{
  "address": "0xC45b277F916294E1835CFa3Ffd0244a4aDe2108d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "diceRollerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoTwoRollsPerBlock",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "random",
          "type": "bytes32"
        }
      ],
      "name": "DiceRolled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "TableCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "blockOfRoll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "playerAddresses",
          "type": "address[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "statSeeds",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "createTable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "destinations",
      "outputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "internalType": "int64",
          "name": "x",
          "type": "int64"
        },
        {
          "internalType": "int64",
          "name": "y",
          "type": "int64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "roll",
          "type": "uint256"
        }
      ],
      "name": "destinationsForRoll",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "player",
              "type": "address"
            },
            {
              "internalType": "int64",
              "name": "x",
              "type": "int64"
            },
            {
              "internalType": "int64",
              "name": "y",
              "type": "int64"
            }
          ],
          "internalType": "struct DelphsTable.Destination[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRoll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "player",
      "outputs": [
        {
          "internalType": "contract IPlayer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "players",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rollTheDice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roller",
      "outputs": [
        {
          "internalType": "contract IDiceRoller",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rolls",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "seeds",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "int64",
          "name": "x",
          "type": "int64"
        },
        {
          "internalType": "int64",
          "name": "y",
          "type": "int64"
        }
      ],
      "name": "setDestination",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "start",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        }
      ],
      "name": "statsForPlayer",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "attack",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "defense",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "health",
              "type": "uint256"
            }
          ],
          "internalType": "struct DelphsTable.Stats",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "tables",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gameLength",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x07a737144d186ec4bc94b08d5b81cd12cd0ea6f55a7610d60b355ebb7ca56f80",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0x905173B6C0A51925d3C9B619466c623c754Fb7BB",
    "contractAddress": "0xC45b277F916294E1835CFa3Ffd0244a4aDe2108d",
    "transactionIndex": 0,
    "gasUsed": "1373575",
    "logsBloom": "0x
    "blockHash": "0x14a3ba4f55a58d5a6a2e88dca7d003b12433ef19eac5d0893eac29e23a1dc17f",
    "transactionHash": "0x07a737144d186ec4bc94b08d5b81cd12cd0ea6f55a7610d60b355ebb7ca56f80",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 906041,
        "transactionHash": "0x07a737144d186ec4bc94b08d5b81cd12cd0ea6f55a7610d60b355ebb7ca56f80",
        "address": "0xC45b277F916294E1835CFa3Ffd0244a4aDe2108d",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
          "0x000000000000000000000000905173b6c0a51925d3c9b619466c623c754fb7bb",
          "0x000000000000000000000000905173b6c0a51925d3c9b619466c623c754fb7bb"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x14a3ba4f55a58d5a6a2e88dca7d003b12433ef19eac5d0893eac29e23a1dc17f"
      }
    ],
    "blockNumber": 906041,
    "cumulativeGasUsed": "1373575",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd4dA38e40f04462DAa0e243901038aF081cC839c",
    "0x987b58d118adf1AD1885141439EBB06844270dC8",
    "0x905173B6C0A51925d3C9B619466c623c754Fb7BB"
  ],
  "numDeployments": 2,
  "solcInputHash": "e74064c30a81560d82c3fbf64645019a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"diceRollerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoTwoRollsPerBlock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"random\",\"type\":\"bytes32\"}],\"name\":\"DiceRolled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"TableCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blockOfRoll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"playerAddresses\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"statSeeds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"createTable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"destinations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"int64\",\"name\":\"x\",\"type\":\"int64\"},{\"internalType\":\"int64\",\"name\":\"y\",\"type\":\"int64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"roll\",\"type\":\"uint256\"}],\"name\":\"destinationsForRoll\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"int64\",\"name\":\"x\",\"type\":\"int64\"},{\"internalType\":\"int64\",\"name\":\"y\",\"type\":\"int64\"}],\"internalType\":\"struct DelphsTable.Destination[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"player\",\"outputs\":[{\"internalType\":\"contract IPlayer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollTheDice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roller\",\"outputs\":[{\"internalType\":\"contract IDiceRoller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rolls\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"seeds\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"int64\",\"name\":\"x\",\"type\":\"int64\"},{\"internalType\":\"int64\",\"name\":\"y\",\"type\":\"int64\"}],\"name\":\"setDestination\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"}],\"name\":\"statsForPlayer\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"attack\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defense\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"health\",\"type\":\"uint256\"}],\"internalType\":\"struct DelphsTable.Stats\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"tables\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gameLength\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DelphsTable.sol\":\"DelphsTable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb4d87ee2ead4bd192b41c128f287d4b7f24b9e0cd740cc9b476881c461286007\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/DelphsTable.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IDiceRoller.sol\\\";\\nimport \\\"./interfaces/IPlayer.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\nerror NoTwoRollsPerBlock();\\nerror Unauthorized();\\nerror AlreadyExists();\\n\\ncontract DelphsTable is AccessControl {\\n  bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n\\n  event DiceRolled(uint indexed index, uint256 indexed blockNumber, bytes32 random);\\n  event TableCreated(bytes32 indexed id);\\n\\n  IDiceRoller immutable public roller;\\n  IPlayer immutable public player;\\n\\n  uint256 public latestRoll;\\n  mapping(uint256 => bytes32) public rolls;\\n  mapping(uint256 => uint256) public blockOfRoll;\\n\\n  mapping(bytes32 => mapping(uint256 => Destination[])) public destinations;\\n\\n  mapping(bytes32 => Table) public tables;\\n\\n  struct Destination {\\n    address player;\\n    int64 x;\\n    int64 y;\\n  }\\n\\n  struct Table {\\n    bytes32 id;\\n    address[] players;\\n    bytes32[] seeds;\\n    address owner;\\n    uint startedAt; // the roll number started at\\n    uint gameLength; // number of rolls to play\\n  }\\n  \\n  struct Stats {\\n    uint256 attack;\\n    uint256 defense;\\n    uint256 health;\\n  }\\n\\n  constructor(address diceRollerAddress, address playerAddress, address initialOwner) {\\n    roller = IDiceRoller(diceRollerAddress);\\n    player = IPlayer(playerAddress);\\n    _setupRole(ADMIN_ROLE, initialOwner);\\n  }\\n\\n  function rollTheDice() public returns (uint) {\\n    if (blockOfRoll[latestRoll] == block.number) {\\n      revert NoTwoRollsPerBlock();\\n    }\\n    bytes32 rnd = roller.getRandom();\\n    rolls[latestRoll + 1] = rnd;\\n    blockOfRoll[latestRoll + 1] = block.number;\\n    latestRoll++;\\n    emit DiceRolled(latestRoll, block.number, rnd);\\n    return latestRoll;\\n  }\\n\\n  function createTable(bytes32 id, address[] calldata playerAddresses, bytes32[] calldata statSeeds, uint256 length, address owner) public {\\n    if (!hasRole(ADMIN_ROLE, msgSender())) {\\n      revert Unauthorized();\\n    }\\n    Table storage table = tables[id];\\n    if (table.players.length > 0) {\\n      revert AlreadyExists();\\n    }\\n    tables[id] = Table({\\n      id: id,\\n      players: playerAddresses,\\n      seeds: statSeeds,\\n      gameLength: length,\\n      owner: owner,\\n      startedAt: 0\\n    });\\n    emit TableCreated(id);\\n  }\\n\\n  function start(bytes32 id) public returns (uint) {\\n    Table storage table = tables[id];\\n    if (msgSender() != table.owner) {\\n      revert Unauthorized();\\n    }\\n    table.startedAt = latestRoll + 1;\\n    return latestRoll + 1;\\n  }\\n\\n  function players(bytes32 id) public view returns (address[] memory) {\\n    return tables[id].players;\\n  }\\n\\n  function seeds(bytes32 id) public view returns (bytes32[] memory) {\\n    return tables[id].seeds;\\n  }\\n\\n  function statsForPlayer(bytes32 id, address playerAddress) public view returns (Stats memory) {\\n    Table storage table = tables[id];\\n    //use the roll from the start (which was unknown to the table starter)\\n    bytes32 rnd = rolls[table.startedAt];\\n\\n    return Stats({\\n      attack: determinsticRandom(rnd, abi.encodePacked(playerAddress, \\\"a\\\"), 1000),\\n      defense: determinsticRandom(rnd, abi.encodePacked(playerAddress, \\\"d\\\"), 900),\\n      health: determinsticRandom(rnd, abi.encodePacked(playerAddress, \\\"h\\\"), 2000)\\n    });\\n  }\\n\\n  function determinsticRandom(bytes32 seed, bytes memory additional, uint256 max) private pure returns (uint256) {\\n    return uint256(keccak256(abi.encodePacked(seed, additional))) % max;\\n  }\\n\\n  function destinationsForRoll(bytes32 id, uint256 roll) public view returns (Destination[] memory) {\\n    return destinations[id][roll];\\n  }\\n\\n  function setDestination(bytes32 id, int64 x, int64 y) public returns (bool) {\\n    address sender = msgSender();\\n    Table storage table = tables[id];\\n    if (!includes(table.players, sender)) {\\n      revert Unauthorized();\\n    }\\n\\n    destinations[id][latestRoll].push(Destination({\\n      x: x,\\n      y: y,\\n      player: sender\\n    }));\\n\\n    return true;\\n  }\\n\\n  function includes(address[] storage arry, address val) private view returns (bool) {\\n    uint256 len = arry.length;\\n    for (uint i = 0; i < len; i++) {\\n      if (arry[i] == val) {\\n        return true;\\n      }\\n    }\\n    return false;\\n  }\\n\\n  function msgSender() private view returns (address) {\\n    address sender = player.deviceToPlayer(msg.sender);\\n    if (sender == address(0)) {\\n      return msg.sender;\\n    }\\n    return sender;\\n  }\\n\\n}\\n\",\"keccak256\":\"0xd0583351ab86a415c5e91254248e1d283bee699b7a023c768555e996a83d3025\",\"license\":\"Unlicense\"},\"contracts/interfaces/IDiceRoller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IDiceRoller {\\n\\n  function getRandom() external view returns (bytes32 rnd);\\n\\n}\",\"keccak256\":\"0x2cebcd9df36dd054dcba79fcec31e97f19fe48ffcaf10afd4ae0832965d9f5de\",\"license\":\"MIT\"},\"contracts/interfaces/IPlayer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IPlayer {\\n\\n  function deviceToPlayer(address device) external view returns (address player);\\n\\n}\",\"keccak256\":\"0x35f8d4db856c72e25d7b4278ce054f88ba514f385d4eea73fb04ba6826a3bd1e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b506040516200191c3803806200191c833981016040819052620000349162000149565b6001600160a01b03808416608052821660a052620000737fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775826200007c565b50505062000193565b6200008882826200008c565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000088576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620000e83390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b80516001600160a01b03811681146200014457600080fd5b919050565b6000806000606084860312156200015f57600080fd5b6200016a846200012c565b92506200017a602085016200012c565b91506200018a604085016200012c565b90509250925092565b60805160a051611755620001c76000396000818161027d0152610d4a0152600081816101f6015261079301526117556000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c80637213b814116100c3578063a217fddf1161007c578063a217fddf14610392578063ae383a4d1461039a578063d3098b9a146103a3578063d547741f1461040b578063e0e543d01461041e578063f15c95491461043e57600080fd5b80637213b814146102bf57806375b238fc146102fb5780637d789dee14610322578063907efe001461032a57806391d148541461035f5780639424732e1461037257600080fd5b80632f09177d116101155780632f09177d146101f15780632f2ff15d14610230578063361508521461024557806336568abe1461026557806348db5f89146102785780635d69f16c1461029f57600080fd5b8063015a18ed1461015257806301ffc9a714610178578063138701321461019b578063248a9ca3146101ae5780632d1dc122146101d1575b600080fd5b61016561016036600461122a565b610451565b6040519081526020015b60405180910390f35b61018b610186366004611243565b6104c1565b604051901515815260200161016f565b61018b6101a936600461127f565b6104f8565b6101656101bc36600461122a565b60009081526020819052604090206001015490565b6101656101df36600461122a565b60036020526000908152604090205481565b6102187f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161016f565b61024361023e3660046112d0565b6105ea565b005b61025861025336600461122a565b610614565b60405161016f9190611300565b6102436102733660046112d0565b610679565b6102187f000000000000000000000000000000000000000000000000000000000000000081565b6101656102ad36600461122a565b60026020526000908152604090205481565b6102d26102cd366004611344565b6106fc565b604080516001600160a01b039094168452600792830b6020850152910b9082015260600161016f565b6101657fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b61016561075d565b61033d6103383660046112d0565b6108be565b604080518251815260208084015190820152918101519082015260600161016f565b61018b61036d3660046112d0565b6109fc565b61038561038036600461122a565b610a25565b60405161016f9190611370565b610165600081565b61016560015481565b6103e36103b136600461122a565b6005602081905260009182526040909120805460038201546004830154929093015490926001600160a01b0316919084565b604080519485526001600160a01b03909316602085015291830152606082015260800161016f565b6102436104193660046112d0565b610a93565b61043161042c3660046113b1565b610ab8565b60405161016f91906113d3565b61024361044c366004611489565b610b58565b600081815260056020526040812060038101546001600160a01b0316610475610d28565b6001600160a01b03161461049b576040516282b42960e81b815260040160405180910390fd5b600180546104a891611536565b6004820155600180546104ba91611536565b9392505050565b60006001600160e01b03198216637965db0b60e01b14806104f257506301ffc9a760e01b6001600160e01b03198316145b92915050565b600080610503610d28565b60008681526005602052604090209091506105216001820183610dd1565b61053d576040516282b42960e81b815260040160405180910390fd5b50600094855260046020908152604080872060018054895290835281882082516060810184526001600160a01b039586168152600798890b8186019081529790980b92880192835280548083018255908952929097209551600290920290950180549451919092166001600160e01b031990941693909317600160a01b67ffffffffffffffff948516021781559251928401805467ffffffffffffffff1916939092169290921790555090565b60008281526020819052604090206001015461060581610e3e565b61060f8383610e4b565b505050565b60008181526005602090815260409182902060020180548351818402810184019094528084526060939283018282801561066d57602002820191906000526020600020905b815481526020019060010190808311610659575b50505050509050919050565b6001600160a01b03811633146106ee5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6106f88282610ecf565b5050565b6004602052826000526040600020602052816000526040600020818154811061072457600080fd5b6000918252602090912060029091020180546001909101546001600160a01b0382169450600160a01b909104600790810b93500b905083565b60015460009081526003602052604081205443900361078f576040516374f70e7960e11b815260040160405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663aacc5a176040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610813919061154e565b9050806002600060015460016108299190611536565b8152602001908152602001600020819055504360036000600154600161084f9190611536565b8152602001908152602001600020819055506001600081548092919061087490611567565b9190505550436001547f61a648c0140ef625babe35b3bc5ba2a28852bd10a17c53f6d9f3831b21096cd7836040516108ae91815260200190565b60405180910390a3505060015490565b6108e260405180606001604052806000815260200160008152602001600081525090565b600083815260056020908152604080832060048101548452600290925291829020548251606081019093529091806109558361093e886080850160609190911b6001600160601b0319168152606160f81b601482015260150190565b6040516020818303038152906040526103e8610f34565b81526020016109a3838760405160200161098c919060609190911b6001600160601b0319168152601960fa1b601482015260150190565b604051602081830303815290604052610384610f34565b81526020016109f183876040516020016109da919060609190911b6001600160601b0319168152600d60fb1b601482015260150190565b6040516020818303038152906040526107d0610f34565b905295945050505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60008181526005602090815260409182902060010180548351818402810184019094528084526060939283018282801561066d57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610a6a5750505050509050919050565b600082815260208190526040902060010154610aae81610e3e565b61060f8383610ecf565b60008281526004602090815260408083208484528252808320805482518185028101850190935280835260609492939192909184015b82821015610b4c576000848152602090819020604080516060810182526002860290920180546001600160a01b0381168452600160a01b9004600790810b84860152600191820154900b918301919091529083529092019101610aee565b50505050905092915050565b610b847fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561036d610d28565b610ba0576040516282b42960e81b815260040160405180910390fd5b6000878152600560205260409020600181015415610bd15760405163119b4fd360e11b815260040160405180910390fd5b6040518060c00160405280898152602001888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250505090825250604080516020888102828101820190935288825292830192909189918991829185019084908082843760009201829052509385525050506001600160a01b038516602080840191909152604080840183905260609093018790528b825260058152919020825181558282015180519192610c9a92600185019290910190611175565b5060408201518051610cb69160028401916020909101906111da565b5060608201516003820180546001600160a01b0319166001600160a01b039092169190911790556080820151600482015560a09091015160059091015560405188907fff39e0eaf58742100b3d96f355f818806f2c4c75c3fb9c8ff1101305924884fa90600090a25050505050505050565b6040516336ec7a7760e01b815233600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906336ec7a7790602401602060405180830381865afa158015610d91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db59190611580565b90506001600160a01b038116610dcc573391505090565b919050565b8154600090815b81811015610e3357836001600160a01b0316858281548110610dfc57610dfc61159d565b6000918252602090912001546001600160a01b031603610e21576001925050506104f2565b80610e2b81611567565b915050610dd8565b506000949350505050565b610e488133610f75565b50565b610e5582826109fc565b6106f8576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610e8b3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610ed982826109fc565b156106f8576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000818484604051602001610f4a9291906115e3565b6040516020818303038152906040528051906020012060001c610f6d9190611609565b949350505050565b610f7f82826109fc565b6106f857610f97816001600160a01b03166014610fd9565b610fa2836020610fd9565b604051602001610fb392919061162b565b60408051601f198184030181529082905262461bcd60e51b82526106e5916004016116a0565b60606000610fe88360026116d3565b610ff3906002611536565b67ffffffffffffffff81111561100b5761100b6116f2565b6040519080825280601f01601f191660200182016040528015611035576020820181803683370190505b509050600360fc1b816000815181106110505761105061159d565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061107f5761107f61159d565b60200101906001600160f81b031916908160001a90535060006110a38460026116d3565b6110ae906001611536565b90505b6001811115611126576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106110e2576110e261159d565b1a60f81b8282815181106110f8576110f861159d565b60200101906001600160f81b031916908160001a90535060049490941c9361111f81611708565b90506110b1565b5083156104ba5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106e5565b8280548282559060005260206000209081019282156111ca579160200282015b828111156111ca57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611195565b506111d6929150611215565b5090565b8280548282559060005260206000209081019282156111ca579160200282015b828111156111ca5782518255916020019190600101906111fa565b5b808211156111d65760008155600101611216565b60006020828403121561123c57600080fd5b5035919050565b60006020828403121561125557600080fd5b81356001600160e01b0319811681146104ba57600080fd5b8035600781900b8114610dcc57600080fd5b60008060006060848603121561129457600080fd5b833592506112a46020850161126d565b91506112b26040850161126d565b90509250925092565b6001600160a01b0381168114610e4857600080fd5b600080604083850312156112e357600080fd5b8235915060208301356112f5816112bb565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b818110156113385783518352928401929184019160010161131c565b50909695505050505050565b60008060006060848603121561135957600080fd5b505081359360208301359350604090920135919050565b6020808252825182820181905260009190848201906040850190845b818110156113385783516001600160a01b03168352928401929184019160010161138c565b600080604083850312156113c457600080fd5b50508035926020909101359150565b602080825282518282018190526000919060409081850190868401855b8281101561143057815180516001600160a01b0316855286810151600790810b8887015290860151900b85850152606090930192908501906001016113f0565b5091979650505050505050565b60008083601f84011261144f57600080fd5b50813567ffffffffffffffff81111561146757600080fd5b6020830191508360208260051b850101111561148257600080fd5b9250929050565b600080600080600080600060a0888a0312156114a457600080fd5b87359650602088013567ffffffffffffffff808211156114c357600080fd5b6114cf8b838c0161143d565b909850965060408a01359150808211156114e857600080fd5b506114f58a828b0161143d565b909550935050606088013591506080880135611510816112bb565b8091505092959891949750929550565b634e487b7160e01b600052601160045260246000fd5b6000821982111561154957611549611520565b500190565b60006020828403121561156057600080fd5b5051919050565b60006001820161157957611579611520565b5060010190565b60006020828403121561159257600080fd5b81516104ba816112bb565b634e487b7160e01b600052603260045260246000fd5b60005b838110156115ce5781810151838201526020016115b6565b838111156115dd576000848401525b50505050565b828152600082516115fb8160208501602087016115b3565b919091016020019392505050565b60008261162657634e487b7160e01b600052601260045260246000fd5b500690565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516116638160178501602088016115b3565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516116948160288401602088016115b3565b01602801949350505050565b60208152600082518060208401526116bf8160408501602087016115b3565b601f01601f19169190910160400192915050565b60008160001904831182151516156116ed576116ed611520565b500290565b634e487b7160e01b600052604160045260246000fd5b60008161171757611717611520565b50600019019056fea26469706673582212207f84921fab607338857f351c3510756ee1a8bc8a10515ec76ca3590bacd43d6e64736f6c634300080e0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c80637213b814116100c3578063a217fddf1161007c578063a217fddf14610392578063ae383a4d1461039a578063d3098b9a146103a3578063d547741f1461040b578063e0e543d01461041e578063f15c95491461043e57600080fd5b80637213b814146102bf57806375b238fc146102fb5780637d789dee14610322578063907efe001461032a57806391d148541461035f5780639424732e1461037257600080fd5b80632f09177d116101155780632f09177d146101f15780632f2ff15d14610230578063361508521461024557806336568abe1461026557806348db5f89146102785780635d69f16c1461029f57600080fd5b8063015a18ed1461015257806301ffc9a714610178578063138701321461019b578063248a9ca3146101ae5780632d1dc122146101d1575b600080fd5b61016561016036600461122a565b610451565b6040519081526020015b60405180910390f35b61018b610186366004611243565b6104c1565b604051901515815260200161016f565b61018b6101a936600461127f565b6104f8565b6101656101bc36600461122a565b60009081526020819052604090206001015490565b6101656101df36600461122a565b60036020526000908152604090205481565b6102187f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161016f565b61024361023e3660046112d0565b6105ea565b005b61025861025336600461122a565b610614565b60405161016f9190611300565b6102436102733660046112d0565b610679565b6102187f000000000000000000000000000000000000000000000000000000000000000081565b6101656102ad36600461122a565b60026020526000908152604090205481565b6102d26102cd366004611344565b6106fc565b604080516001600160a01b039094168452600792830b6020850152910b9082015260600161016f565b6101657fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b61016561075d565b61033d6103383660046112d0565b6108be565b604080518251815260208084015190820152918101519082015260600161016f565b61018b61036d3660046112d0565b6109fc565b61038561038036600461122a565b610a25565b60405161016f9190611370565b610165600081565b61016560015481565b6103e36103b136600461122a565b6005602081905260009182526040909120805460038201546004830154929093015490926001600160a01b0316919084565b604080519485526001600160a01b03909316602085015291830152606082015260800161016f565b6102436104193660046112d0565b610a93565b61043161042c3660046113b1565b610ab8565b60405161016f91906113d3565b61024361044c366004611489565b610b58565b600081815260056020526040812060038101546001600160a01b0316610475610d28565b6001600160a01b03161461049b576040516282b42960e81b815260040160405180910390fd5b600180546104a891611536565b6004820155600180546104ba91611536565b9392505050565b60006001600160e01b03198216637965db0b60e01b14806104f257506301ffc9a760e01b6001600160e01b03198316145b92915050565b600080610503610d28565b60008681526005602052604090209091506105216001820183610dd1565b61053d576040516282b42960e81b815260040160405180910390fd5b50600094855260046020908152604080872060018054895290835281882082516060810184526001600160a01b039586168152600798890b8186019081529790980b92880192835280548083018255908952929097209551600290920290950180549451919092166001600160e01b031990941693909317600160a01b67ffffffffffffffff948516021781559251928401805467ffffffffffffffff1916939092169290921790555090565b60008281526020819052604090206001015461060581610e3e565b61060f8383610e4b565b505050565b60008181526005602090815260409182902060020180548351818402810184019094528084526060939283018282801561066d57602002820191906000526020600020905b815481526020019060010190808311610659575b50505050509050919050565b6001600160a01b03811633146106ee5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6106f88282610ecf565b5050565b6004602052826000526040600020602052816000526040600020818154811061072457600080fd5b6000918252602090912060029091020180546001909101546001600160a01b0382169450600160a01b909104600790810b93500b905083565b60015460009081526003602052604081205443900361078f576040516374f70e7960e11b815260040160405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663aacc5a176040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610813919061154e565b9050806002600060015460016108299190611536565b8152602001908152602001600020819055504360036000600154600161084f9190611536565b8152602001908152602001600020819055506001600081548092919061087490611567565b9190505550436001547f61a648c0140ef625babe35b3bc5ba2a28852bd10a17c53f6d9f3831b21096cd7836040516108ae91815260200190565b60405180910390a3505060015490565b6108e260405180606001604052806000815260200160008152602001600081525090565b600083815260056020908152604080832060048101548452600290925291829020548251606081019093529091806109558361093e886080850160609190911b6001600160601b0319168152606160f81b601482015260150190565b6040516020818303038152906040526103e8610f34565b81526020016109a3838760405160200161098c919060609190911b6001600160601b0319168152601960fa1b601482015260150190565b604051602081830303815290604052610384610f34565b81526020016109f183876040516020016109da919060609190911b6001600160601b0319168152600d60fb1b601482015260150190565b6040516020818303038152906040526107d0610f34565b905295945050505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60008181526005602090815260409182902060010180548351818402810184019094528084526060939283018282801561066d57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610a6a5750505050509050919050565b600082815260208190526040902060010154610aae81610e3e565b61060f8383610ecf565b60008281526004602090815260408083208484528252808320805482518185028101850190935280835260609492939192909184015b82821015610b4c576000848152602090819020604080516060810182526002860290920180546001600160a01b0381168452600160a01b9004600790810b84860152600191820154900b918301919091529083529092019101610aee565b50505050905092915050565b610b847fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561036d610d28565b610ba0576040516282b42960e81b815260040160405180910390fd5b6000878152600560205260409020600181015415610bd15760405163119b4fd360e11b815260040160405180910390fd5b6040518060c00160405280898152602001888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250505090825250604080516020888102828101820190935288825292830192909189918991829185019084908082843760009201829052509385525050506001600160a01b038516602080840191909152604080840183905260609093018790528b825260058152919020825181558282015180519192610c9a92600185019290910190611175565b5060408201518051610cb69160028401916020909101906111da565b5060608201516003820180546001600160a01b0319166001600160a01b039092169190911790556080820151600482015560a09091015160059091015560405188907fff39e0eaf58742100b3d96f355f818806f2c4c75c3fb9c8ff1101305924884fa90600090a25050505050505050565b6040516336ec7a7760e01b815233600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906336ec7a7790602401602060405180830381865afa158015610d91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db59190611580565b90506001600160a01b038116610dcc573391505090565b919050565b8154600090815b81811015610e3357836001600160a01b0316858281548110610dfc57610dfc61159d565b6000918252602090912001546001600160a01b031603610e21576001925050506104f2565b80610e2b81611567565b915050610dd8565b506000949350505050565b610e488133610f75565b50565b610e5582826109fc565b6106f8576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610e8b3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610ed982826109fc565b156106f8576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000818484604051602001610f4a9291906115e3565b6040516020818303038152906040528051906020012060001c610f6d9190611609565b949350505050565b610f7f82826109fc565b6106f857610f97816001600160a01b03166014610fd9565b610fa2836020610fd9565b604051602001610fb392919061162b565b60408051601f198184030181529082905262461bcd60e51b82526106e5916004016116a0565b60606000610fe88360026116d3565b610ff3906002611536565b67ffffffffffffffff81111561100b5761100b6116f2565b6040519080825280601f01601f191660200182016040528015611035576020820181803683370190505b509050600360fc1b816000815181106110505761105061159d565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061107f5761107f61159d565b60200101906001600160f81b031916908160001a90535060006110a38460026116d3565b6110ae906001611536565b90505b6001811115611126576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106110e2576110e261159d565b1a60f81b8282815181106110f8576110f861159d565b60200101906001600160f81b031916908160001a90535060049490941c9361111f81611708565b90506110b1565b5083156104ba5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106e5565b8280548282559060005260206000209081019282156111ca579160200282015b828111156111ca57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611195565b506111d6929150611215565b5090565b8280548282559060005260206000209081019282156111ca579160200282015b828111156111ca5782518255916020019190600101906111fa565b5b808211156111d65760008155600101611216565b60006020828403121561123c57600080fd5b5035919050565b60006020828403121561125557600080fd5b81356001600160e01b0319811681146104ba57600080fd5b8035600781900b8114610dcc57600080fd5b60008060006060848603121561129457600080fd5b833592506112a46020850161126d565b91506112b26040850161126d565b90509250925092565b6001600160a01b0381168114610e4857600080fd5b600080604083850312156112e357600080fd5b8235915060208301356112f5816112bb565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b818110156113385783518352928401929184019160010161131c565b50909695505050505050565b60008060006060848603121561135957600080fd5b505081359360208301359350604090920135919050565b6020808252825182820181905260009190848201906040850190845b818110156113385783516001600160a01b03168352928401929184019160010161138c565b600080604083850312156113c457600080fd5b50508035926020909101359150565b602080825282518282018190526000919060409081850190868401855b8281101561143057815180516001600160a01b0316855286810151600790810b8887015290860151900b85850152606090930192908501906001016113f0565b5091979650505050505050565b60008083601f84011261144f57600080fd5b50813567ffffffffffffffff81111561146757600080fd5b6020830191508360208260051b850101111561148257600080fd5b9250929050565b600080600080600080600060a0888a0312156114a457600080fd5b87359650602088013567ffffffffffffffff808211156114c357600080fd5b6114cf8b838c0161143d565b909850965060408a01359150808211156114e857600080fd5b506114f58a828b0161143d565b909550935050606088013591506080880135611510816112bb565b8091505092959891949750929550565b634e487b7160e01b600052601160045260246000fd5b6000821982111561154957611549611520565b500190565b60006020828403121561156057600080fd5b5051919050565b60006001820161157957611579611520565b5060010190565b60006020828403121561159257600080fd5b81516104ba816112bb565b634e487b7160e01b600052603260045260246000fd5b60005b838110156115ce5781810151838201526020016115b6565b838111156115dd576000848401525b50505050565b828152600082516115fb8160208501602087016115b3565b919091016020019392505050565b60008261162657634e487b7160e01b600052601260045260246000fd5b500690565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516116638160178501602088016115b3565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516116948160288401602088016115b3565b01602801949350505050565b60208152600082518060208401526116bf8160408501602087016115b3565b601f01601f19169190910160400192915050565b60008160001904831182151516156116ed576116ed611520565b500290565b634e487b7160e01b600052604160045260246000fd5b60008161171757611717611520565b50600019019056fea26469706673582212207f84921fab607338857f351c3510756ee1a8bc8a10515ec76ca3590bacd43d6e64736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/DelphsTable.sol:DelphsTable",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 691,
        "contract": "contracts/DelphsTable.sol:DelphsTable",
        "label": "latestRoll",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 695,
        "contract": "contracts/DelphsTable.sol:DelphsTable",
        "label": "rolls",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 699,
        "contract": "contracts/DelphsTable.sol:DelphsTable",
        "label": "blockOfRoll",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 707,
        "contract": "contracts/DelphsTable.sol:DelphsTable",
        "label": "destinations",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_array(t_struct(Destination)719_storage)dyn_storage))"
      },
      {
        "astId": 712,
        "contract": "contracts/DelphsTable.sol:DelphsTable",
        "label": "tables",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_struct(Table)734_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Destination)719_storage)dyn_storage": {
        "base": "t_struct(Destination)719_storage",
        "encoding": "dynamic_array",
        "label": "struct DelphsTable.Destination[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_int64": {
        "encoding": "inplace",
        "label": "int64",
        "numberOfBytes": "8"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_mapping(t_uint256,t_array(t_struct(Destination)719_storage)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(uint256 => struct DelphsTable.Destination[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_array(t_struct(Destination)719_storage)dyn_storage)"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes32,t_struct(Table)734_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct DelphsTable.Table)",
        "numberOfBytes": "32",
        "value": "t_struct(Table)734_storage"
      },
      "t_mapping(t_uint256,t_array(t_struct(Destination)719_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DelphsTable.Destination[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Destination)719_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Destination)719_storage": {
        "encoding": "inplace",
        "label": "struct DelphsTable.Destination",
        "members": [
          {
            "astId": 714,
            "contract": "contracts/DelphsTable.sol:DelphsTable",
            "label": "player",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 716,
            "contract": "contracts/DelphsTable.sol:DelphsTable",
            "label": "x",
            "offset": 20,
            "slot": "0",
            "type": "t_int64"
          },
          {
            "astId": 718,
            "contract": "contracts/DelphsTable.sol:DelphsTable",
            "label": "y",
            "offset": 0,
            "slot": "1",
            "type": "t_int64"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/DelphsTable.sol:DelphsTable",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/DelphsTable.sol:DelphsTable",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Table)734_storage": {
        "encoding": "inplace",
        "label": "struct DelphsTable.Table",
        "members": [
          {
            "astId": 721,
            "contract": "contracts/DelphsTable.sol:DelphsTable",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 724,
            "contract": "contracts/DelphsTable.sol:DelphsTable",
            "label": "players",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 727,
            "contract": "contracts/DelphsTable.sol:DelphsTable",
            "label": "seeds",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 729,
            "contract": "contracts/DelphsTable.sol:DelphsTable",
            "label": "owner",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 731,
            "contract": "contracts/DelphsTable.sol:DelphsTable",
            "label": "startedAt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 733,
            "contract": "contracts/DelphsTable.sol:DelphsTable",
            "label": "gameLength",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}